var webpage = require('webpage'), page = webpage.create();
var fs = require('fs');

page.viewportSize = { width: 1024, height: 800 };
page.clipRect = { top: 0, left: 0, width: 1024, height: 800 };
page.settings = {
  javascriptEnabled: true,
  loadImages: true,
  webSecurityEnabled: false,
  userAgent: 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/537.36 LBBROWSER'
  //要指定谷歌ua,我用火狐无法浏览
};

var lastReceived = new Date().getTime();
var requestCount = 0;
var responseCount = 0;
var requestIds = [];
var startTime = new Date().getTime();
page.onLoadStarted = function () {
  page.startTime = new Date();
};//获取页面开始加载的时间
//viewportSize being the actual size of the headless browser
  //page.viewportSize = { width: 1024, height: 768 };
//the clipRect is the portion of the page you are taking a screenshot of
  page.clipRect = { top: 0, left: 0, width: 1324, height: 1768 };
//the rest of the code is the same as the previous example

page.open('http://wenshu.court.gov.cn/List/List?sorttype=1&conditions=searchWord+1+AJLX++%E6%A1%88%E4%BB%B6%E7%B1%BB%E5%9E%8B:%E5%88%91%E4%BA%8B%E6%A1%88%E4%BB%B6', function () {
  console.log('start');
  if (status === 'fail') {
    console.log('open page fail!');
  } else {
    waitFor(function () {
      return page.evaluate(function () {
        //判断页面加载完成的信号,
        return $("div:first-child").length > 100;//我算了一下，大概有106条。这个有待改进
      });
    }, function () {
      //页面加载完成后我们的DOM操作,
      //引入外部js库
      page.includeJs("http://libs.baidu.com/jquery/2.0.0/jquery.js", function () {
        page.evaluate(function () { //操作页面事件
        console.log("jQuery version:" + jQuery.fn.jquery);
        //var iter = 0
	//while(iter<3){ 
        
	
		for (var i=0; i<5; i++){
		  console.log(document.getElementsByClassName("download")[i].getElementsByTagName("img")[0].outerHTML);
		  
		}

	//iter = iter + 1;
	//document.getElementById("pageNumber").getElementsByTagName('a')[6].click();	
	//}
        });
        setTimeout(function () {
          page.render('../snapshot/taoba2o.png');
        }, 2000);
        //console.log()
        var t = Date.now() - page.startTime; //页面加载完成后的当前时间减去页面开始加载的时间，为整个页面加载时间
        console.log('firstLoadPage time :' + t + 'ms');

        console.log("end");
        setTimeout(function () {
          page.close();
          phantom.exit();
        }, 0);
      });
    });
  }
});
function screan(filename) {

  page.render(filename);
}


function waitFor(testFx, onReady, timeOutMillis) {
  var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 4000, //< Default Max Timout is 3s
    start = new Date().getTime(),
    condition = false,
    interval = setInterval(function () {
      if ((new Date().getTime() - start < maxtimeOutMillis) && !condition) {
        // If not time-out yet and condition not yet fulfilled
        screan('../snapshot/taobao.png');
        condition = (typeof (testFx) === "string" ? eval(testFx) : testFx()); //< defensive code
      } else {
        if (!condition) {
          // If condition still not fulfilled (timeout but condition is 'false')
          console.log("'waitFor()' timeout");
          phantom.exit(1);
        } else {
          // Condition fulfilled (timeout and/or condition is 'true')
          console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
          typeof (onReady) === "string" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled
          clearInterval(interval); //< Stop this interval
        }
      }
    }, 250); //< repeat check every 250ms
};
page.onCallback = function (data) {
  console.log('CALLBACK: ' + JSON.stringify(data));
  // Prints 'CALLBACK: { "hello": "world" }'
};
page.onAlert = function (msg) {
  console.log('ALERT: ' + msg);
};
page.onConsoleMessage = function (msg, lineNum, sourceId) {
  console.log('CONSOLE** :' + msg);

  var file = fs.open("./2.txt",'a');
  file.write('\n' + msg);
  file.close();


  var re = new RegExp("[/?id=]+[0-9]{11}");
  var arr = (msg.match(re));
  //if (arr != null) {
  //	console.log(msg.match(re)[0].replace("?id=", ""));
  //}
};
page.onError = function (msg, trace) {
  var msgStack = ['ERROR: ' + msg];

  if (trace && trace.length) {
    msgStack.push('TRACE:');
    trace.forEach(function (t) {
      msgStack.push(' -> ' + t.file + ': ' + t.line + (t.function ? ' (in function "' + t.function + '")' : ''));
    });
  }
  console.error(msgStack.join('\n'));
};
